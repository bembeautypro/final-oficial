set -e

echo "üîß Iniciando otimiza√ß√µes de performance/SEO..."

# 0) Criar branch de seguran√ßa
git checkout -B perf-seo-fixes-$(date +%Y%m%d-%H%M)

# 1) Manifest local e robots.txt v√°lidos
cat > site.webmanifest <<'EOF'
{
  "name": "NIVELA",
  "short_name": "NIVELA",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#0A1419",
  "theme_color": "#0A1419",
  "icons": [
    { "src": "/favicon.ico", "sizes": "64x64 32x32 24x24 16x16", "type": "image/x-icon" }
  ]
}
EOF

cat > robots.txt <<'EOF'
User-agent: *
Allow: /

Sitemap: https://nivela.bembeauty.com.br/sitemap.xml
EOF

# 2) vercel.json com cache agressivo para assets e manifest local
if [ -f vercel.json ]; then
  cp vercel.json vercel.json.bak || true
fi

cat > vercel.json <<'EOF'
{
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "headers": [
    {
      "source": "/assets/(.*)",
      "headers": [
        { "key": "Cache-Control", "value": "public, max-age=31536000, immutable" }
      ]
    },
    {
      "source": "/site.webmanifest",
      "headers": [
        { "key": "Content-Type", "value": "application/manifest+json" },
        { "key": "Cache-Control", "value": "public, max-age=86400" }
      ]
    },
    {
      "source": "/favicon.ico",
      "headers": [
        { "key": "Cache-Control", "value": "public, max-age=31536000, immutable" }
      ]
    }
  ]
}
EOF

# 3) Corrigir link do manifest e marcar imagem LCP com fetchpriority="high"
# (a) Troca manifest hospedado no Supabase por /site.webmanifest local
if grep -Rni "site.webmanifest" index.html client/index.html 2>/dev/null | grep -q "supabase.co"; then
  sed -i 's#https://[^"]\+/site\.webmanifest#/site.webmanifest#g' index.html 2>/dev/null || true
  sed -i 's#https://[^"]\+/site\.webmanifest#/site.webmanifest#g' client/index.html 2>/dev/null || true
fi

# (b) Marcar imagem LCP (hero) com fetchpriority="high" e decoding="async"
# Procurar pelo arquivo hero mais comum
LCP_FILE=$(grep -RliE "nivela-hero\.webp|frasco-nivela-hero|frasco-nivela-destaque|hero\.webp" src client/src 2>/dev/null | head -n1 || true)

if [ -n "$LCP_FILE" ]; then
  # Garante atributos; evita duplicar caso j√° existam
  sed -i 's/<img /<img decoding="async" /g' "$LCP_FILE"
  sed -i 's/<img[^>]*>/&/g' "$LCP_FILE"
  # fetchpriority
  if ! grep -q "fetchpriority=" "$LCP_FILE"; then
    sed -i '0,/<img /s//<img fetchpriority="high" /' "$LCP_FILE"
  fi
  # loading eager (se houver loading=)
  if grep -q 'loading=' "$LCP_FILE"; then
    sed -i 's/loading="lazy"/loading="eager"/g' "$LCP_FILE"
  else
    sed -i '0,/<img /s//<img loading="eager" /' "$LCP_FILE"
  fi
  echo "‚úÖ LCP ajustada em: $LCP_FILE"
else
  echo "‚ÑπÔ∏è N√£o encontrei o arquivo do hero; pulei o passo LCP."
fi

# 4) Evitar download do v√≠deo no load (preload=none + playsInline + controls + poster)
# Vamos procurar por <video> ou .mp4 nos componentes
VIDEO_FILES=$(grep -RliE "<video|\.mp4" src client/src 2>/dev/null || true)
if [ -n "$VIDEO_FILES" ]; then
  for F in $VIDEO_FILES; do
    # adiciona preload="none" se n√£o houver
    if ! grep -q 'preload=' "$F"; then
      sed -i 's/<video /<video preload="none" /g' "$F"
    else
      sed -i 's/preload="[^"]*"/preload="none"/g' "$F"
    fi
    # garante playsInline e controls
    sed -i 's/<video /<video playsInline controls /g' "$F"
    # adiciona poster se n√£o houver
    if ! grep -q 'poster=' "$F"; then
      sed -i 's/<video /<video poster="\/poster-nivela.jpg" /g' "$F"
    fi
  done
  echo "‚úÖ V√≠deo configurado com preload='none', playsInline, controls e poster em:"
  echo "$VIDEO_FILES"
else
  echo "‚ÑπÔ∏è N√£o encontrei <video> ou .mp4; pulei o passo do v√≠deo."
fi

# 5) Dica ao dev: lembrar de subir um poster leve
echo "‚ÑπÔ∏è Lembrete: adicione um poster leve em /public ou raiz como /poster-nivela.jpg (<=40KB)."

# 6) Build para validar
npm run build || true

# 7) Commit e push
git add -A
git commit -m "perf/seo: manifest local, robots.txt, cache headers, LCP fetchpriority, v√≠deo preload=none"
git push origin HEAD

echo "üéâ Pronto! Fa√ßa o redeploy na Vercel (se n√£o for autom√°tico) e teste."